package com.strong.web.controller;

import java.io.IOException;
import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.validation.BindingResult;
import org.springframework.validation.DataBinder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.strong.constant.ErrorCodes;
import com.strong.model.dto.PaginatedResult;
import com.strong.model.entity.Menu;
import com.strong.model.entity.User;
import com.strong.model.entity.UserToken;
import com.strong.exception.BusinessException;
import com.strong.exception.ErrorDetail;
import com.strong.exception.InputValidationException;
import com.strong.exception.ServiceException;
import com.strong.service.LoginServiceImpl;
import com.strong.service.RegisterService;
import com.strong.util.CheckPwdStrengthUtil;
import com.strong.util.*;
import com.strong.web.model.RegisterRequest;
import com.strong.web.model.LoginResponse;
import com.strong.common.Data;

@RestController
public class MenuController {
	private static Logger logger = LoggerFactory.getLogger(MenuController.class);

    @RequestMapping(value = "/menu", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @CrossOrigin(origins = "*")
    public ResponseEntity<?> logoffAction() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        UserToken token = (UserToken) authentication.getPrincipal();
        
        
		return ResponseEntity
				.status(HttpStatus.OK)
				.body("logoffSuccess");
    }
    
    private static void updateMenuAccess(Menu[] menus)
    {
        int displaySubMenuCount = 0, lvl3MenuCount = 0;


            List<String> accessMenu = getMenu();
            for(Menu menu :menus)
            {
                menu.getDisplay() = accessMenu.Any(m -> String. menu.MenuCode, StringComparison.OrdinalIgnoreCase));
                
                if (menu.subNav != null/* && menu.Display == true*/)
                {
                    // if sub menu will display, then the parent menu will also display.
                    displaySubMenuCount = 0;
                    foreach (var subMenu in menu.subNav)
                    {
                        subMenu.Display = accessMenu.Any(m => m.Equals(subMenu.MenuCode, StringComparison.OrdinalIgnoreCase));
                        if (subMenu.subNav != null)
                        {
                            lvl3MenuCount = 0;
                            foreach (var subsubmenu in subMenu.subNav)
                            {
                                subsubmenu.Display = accessMenu.Any(m => m.Equals(subsubmenu.MenuCode, StringComparison.OrdinalIgnoreCase));
                                if (subsubmenu.Display == true)
                                {
                                    lvl3MenuCount++;
                                }
                            }
                            subMenu.Display = lvl3MenuCount > 0;
                        }
                        if (subMenu.Display == true)
                        {
                            displaySubMenuCount++;
                        }
                    }

                    menu.Display = displaySubMenuCount > 0;

                    if (displaySubMenuCount > 0)
                    {
                        // set the parent menu route to its first visible child menu route
                        var firstDiplayedSubMenu = menu.subNav.FirstOrDefault(m => m.Display == true);
                        if (firstDiplayedSubMenu != null)
                        {
                            // if parent menu route is set for specific sub menu route and it is visible, then skip setting the parent route again.
                            if (!menu.subNav.Any(m=>m.Display == true && m.Route.Equals(menu.Route,StringComparison.OrdinalIgnoreCase)))
                            {
                                menu.Route = firstDiplayedSubMenu.Route;
                            }
                            
                        }
                    }

                }

                if (menu.Route.Equals("home",StringComparison.OrdinalIgnoreCase))
                {
                    menu.Display = true;
                }
            }
        }
    }	
}

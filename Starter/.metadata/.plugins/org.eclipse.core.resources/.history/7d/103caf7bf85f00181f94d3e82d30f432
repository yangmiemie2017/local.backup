(function () {
    'use strict';

    var requireConfig = {
        'baseUrl': '/Scripts/spa/'

    };

    require.config(requireConfig);

    define('app', function () {

        return angular
             .module('strive', ['ngRequire', 'ui.router', 'ngResource', 'ngAnimate', 'ngplus', 'ui.bootstrap', 'ngFileUpload',
                         'ui.router.state', 'ncy-angular-breadcrumb', 'ui.grid', 'ui.grid.selection', 'ngMessages', 'blocks.logger',
                         'angular.filter', 'ui.grid.edit', 'ui.grid.pagination', 'angular-drag', 'ui.tree'
             ])
             //.constant('authInterceptor', authInterceptor)
//            .config(function ($httpProvider) {
//                $httpProvider.interceptors.push(authInterceptor);
//            })
             .config(function ($breadcrumbProvider) {
                 $breadcrumbProvider.setOptions({
                     prefixStateName: 'home',
                     template: 'bootstrap3'
                 });
             })
             .constant('toastr', toastr)
             .config(function toastrConfig(toastr) {
                 toastr.options.closeButton = true;
                 //toastr.options.preventDuplicates = true;
                 toastr.options.timeOut = 0;
                 toastr.options.extendedTimeOut = 0;
                 toastr.options.positionClass = 'toast-bottom-left';
                 toastr.options.tapToDismiss = false;
             })
             .config(config)
             .run(kickstart)
             .controller('headerCtrl', headerCtrl);
        
        function LeaveModalCtrl($uibModalInstance, message) {
            var vm = this;

            vm.message = message;
            vm.yes = function () {
                $uibModalInstance.close();
            }

            vm.no = function () {
                $uibModalInstance.dismiss('cancel');
            }
        }

        headerCtrl.$inject = ['$http', '$state', '$rootScope', 'logger', '$uibModal'];

        function headerCtrl($http, $state, $rootScope, logger, $uibModal) {
            var vm = this;
            vm.tabs = [];
            vm.activeTab = false;
            vm.activeTabSaved = false;            

            vm.enter = function (clickingTab) {
                var searchArray = ['t1', "t2", 't3'];
                if (clickingTab.route) {
                    if (searchArray.indexOf(clickingTab.route) >= 0) {
                        $state.go(clickingTab.route, { trigger: "menu" });
                    } else if (clickingTab.route === 't4') {
                        $state.go("t4");
                    } else if (clickingTab.route === 't5') {
                        $state.go("t5");
                    } else if (!clickingTab.subNav) {
                        $state.go(clickingTab.route);
                    } else if (clickingTab.route == clickingTab.subNav[0].route) {
                        $state.go(clickingTab.route);
                    }
                }
            };


            vm.subTabActive = function (tab) {
                return $state.current.name === tab.route;
            };

            vm.myResolver = function (defaultResolver, state, isCurrent) {
                if (isCurrent) {
                    return state.data.settings.displayName || state.name;
                }

                return defaultResolver(state);
            }

            var isConfirmed = false;
            $rootScope.$on('$stateChangeStart',
                function (event, toState, toParams, fromState, fromParams) {
            	var token = $window.sessionStorage.getItem("TOKEN");
            	if (toState.name != 'login' &&token==null) {
                        event.preventDefault();
                        $state.go('login');
                        return;
                    }
                        if (!isConfirmed && fromParams.isDirty && fromState.name != toState.name && fromState.warning == true) {
                        event.preventDefault();
                        var msg = "You have modified data on this page. Do you wish to leave without saving changes?";
                        var modal = $uibModal.open({
                            animation: true,
                            templateUrl: 'modal-leave',
                            backdrop: 'static',
                            controller: ['$uibModalInstance', 'message', LeaveModalCtrl],
                            controllerAs: 'vm',
                            resolve: {
                                message: function () { return msg; }
                            }
                        });

                        modal.result.then(function () {
                            isConfirmed = true;
                            $state.go(toState, toParams);
                        }, function () {
                            return;
                        });
                    }
                });

            $(document).on("keydown", function (e) {
                if (e.which === 8 && !$(e.target).is("input, textarea") && angular.element(".modal-open").length > 0) {
                    e.preventDefault();
                }
            });

            $rootScope.$on('$stateChangeSuccess',
                function (event, toState, toParams, fromState, fromParams) {
                    //to clear all the active tag
                    sessionStorage.setItem("routeStateTo", toState.name);
                    sessionStorage.setItem("routeStateFrom", fromState.name);
                    for (var i = 0; i < vm.tabs.length; i++) {
                        vm.tabs[i].activeTab = false;
                    }

                    vm.checkForIndex = function () {
                        var index = 0;
                        angular.forEach(vm.tabs, function (tab) {
                            if (tab.subNav) {
                                for (var i = 0; i < tab.subNav.length; i++) {
                                    if (tab.subNav[i].route === toState.name) {
                                        tab.newRouteResult = tab.subNav[i].route;
                                    }
                                }
                            }

                            if (angular.equals(toState.name, tab.route) || angular.equals(toState.name, tab.newRouteResult)) {
                                event.preventDefault();
                                //vm.activeTab = index;
                                //start a new active tag
                                vm.tabs[index].activeTab = true;
                                return;
                            }
                            index++;
                            tab.newRouteResult = null;
                        });
                    };
                    vm.checkForIndex();

                    isConfirmed = false;

                    if (toState.name != "help" && toState.name != "login" && toState.name != "logout" && toState.name != "noAccess") {
                        vm.showHeader = true;
                    }
                    else {
                        vm.showHeader = false;
                    }

                    document.getElementsByTagName('body')[0].scrollTop = 0;
                });

            $rootScope.$on('$stateChangeStart', function () {
                loadMenu();
            });

            // load menu data
            function loadMenu() {
                $http({
                    method: 'get',
                    url: '/menu',
                    cache: false
                }).then(function (resp) {
                    vm.specieslogIn = window.sessionStorage.getItem("specieslogIn");
                    vm.regionlogIn = window.sessionStorage.getItem("regionlogIn");

                    vm.tabs = resp.data;

                    if (!(vm.specieslogIn == "CRNF" && vm.regionlogIn == "2") && vm.tabs[1].subNav[5].menuCode == 'MCSV') {
                        vm.tabs[1].subNav[5].display = false;
                    }
                    //the function of mouse over and show subtab
                    vm.enterSubMenu = function (tab) {
                        for (var i = 0; i < vm.tabs.length; i++) {
                            if (vm.tabs[i].subNav) {
                                if (tab.title === vm.tabs[i].title) {
                                    vm.tabs[i].needShowSub = true;
                                }
                            }
                        }
                    }

                    //the function of mouse out and hide subtab
                    vm.leaveSubMenu = function () {
                        for (var i = 0; i < vm.tabs.length; i++) {
                            if (vm.tabs[i].needShowSub) {
                                vm.tabs[i].needShowSub = false;
                            }
                        }
                    }
                },
                function (error) {
                    // if it is Forbidden, then go to access deny page.
                    //if (error.status === 403) {
                    //    $state.go('noAccess');
                    //}
                    logger.error(error.data.message);

                });
            }
            loadMenu();
        }

        config.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider', '$requireProvider'];
        function config($stateProvider, $urlRouterProvider, $locationProvider, $requireProvider) {

            var requireJS = $requireProvider.requireJS;
            var requireCSS = $requireProvider.requireCSS;

            //$locationProvider.html5Mode({
            //    enabled: true,
            //    requireBase: false
            //});

            $urlRouterProvider.rule(function ($injector, $location) {
                //what this function returns will be set as the $location.url
                var path = $location.path(), normalized = path.toLowerCase();
                if (path != normalized) {
                    //instead of returning a new url string, I'll just change the $location.path directly so I don't have to worry about constructing a new url string and so a new state change is not triggered
                    $location.replace().path(normalized);
                }
                // because we've returned nothing, no state change occurs
            });


            //
            // For any unmatched url, redirect to /
            $urlRouterProvider
                .otherwise("/");

            // Now set up the states
            $stateProvider
                .state('login', {
                    url: "/",
                    templateUrl: "login.html",
                    resolve: {
                        deps: requireJS([
                          'login'
                        ])
                    },
                    ncyBreadcrumb: {
                        label: 'Login'
                    }
                })
                .state('regist', {
                    url: "/regist",
                    templateUrl: "Scripts/spa/regist/regist.html",
                    resolve: {
                        deps: requireJS([
                          'regist/regist.controller'
                        ])
                    },
                    ncyBreadcrumb: {
                        label: 'Regist'
                    }
                })                   
                .state('home', {
                    url: "/home",
                    templateUrl: "Scripts/spa/home/home.html",
                    resolve: {
                        deps: requireJS([
                          'home/home.controller'
                        ])
                    },
                    ncyBreadcrumb: {
                        label: 'Home'
                    }
                })

            .state('noAccess', {
                url: "/no-access",
                templateUrl: "Scripts/spa/securityError/access-deny.html",
                resolve: {
                    deps: requireJS([
                      'blocks/accessDeny/accessDenyInterceptor'
                    ])
                },
                ncyBreadcrumb: {
                    skip: true
                }
            })
            .state('logout', {
                url: "/logout",
                templateUrl: "Scripts/spa/logout/logout.html",
                controller: "logoutCtrl as loCtrl",
                resolve: {
                    deps: requireJS([
                      'logout/logout.controller'
                    ])
                },
                ncyBreadcrumb: {
                    skip: true
                }
            })
            .state('help', {
                url: "/help",
                templateUrl: "Scripts/spa/help/help.html",
                resolve: {
                    deps: requireJS([
                        'help/help.controller'
                    ])
                },
                ncyBreadcrumb: {
                    skip: true
                }
            })
            ;
        }

        kickstart.$inject = ['$rootScope', '$log', 'logger', '$state', '$window'];
        function kickstart($rootScope, $log, logger, $state, $window) {
            $rootScope.$on('$stateChangeStart',
               function (event, toState, toParams, fromState, fromParams, options) {
                   $log.info('$stateChangeStart: ' + toState.name);

                   var token = $window.sessionStorage.getItem("TOKEN");
                   if (['login', 'regist'].indexOf(toState.name)<0 && (token == null || token == '')) {
                       event.preventDefault();
                       $state.go('login');
                       return;
                   }

                   if (toState.name != fromState.name) {
                       logger.remove();
                   }

               });

            $rootScope.$on('$stateChangeError',
     function (event, toState, toParams, fromState, fromParams, error) {
         $log.info('$stateChangeError: ' + toState.name);

     });
        }

        authInterceptor.$inject = ['$rootScope', '$q', '$window', '$state'];
        function authInterceptor($rootScope, $q, $window, $state) {
            return {
                request: function (config) {
                    config.headers = config.headers || {};
                    var token = $window.sessionStorage.getItem("TOKEN");
                    if (token != null && token != '') {
                        config.defaults.headers.common['Authorization']  = 'Token ' + $window.sessionStorage.getItem('TOKEN');
                    }
                    return config;
                },
                response: function (response) {
                    if (response.status === 401) {
                        $state.go('login');
                    }
                    return response || $q.when(response);
                }
            };
        }

    })
})();
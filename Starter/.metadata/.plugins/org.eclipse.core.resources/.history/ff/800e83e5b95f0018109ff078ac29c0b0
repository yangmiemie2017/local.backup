package com.strong.web.menu;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import net.sf.json.JSONArray; 
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import com.strong.model.entity.*;;

public class MenuSetingHelper {
	private static String menu="";
	static {
		// 第1步、使用File类找到一个文件
		File f = new File("menuSetting.json"); // 声明File对象
		// 第2步、通过子类实例化父类对象
		InputStream input = null; // 准备好一个输入的对象
		try {
			input = new FileInputStream(f);
			// 第3步、进行读操作
			byte b[] = new byte[(int)f.length()] ; // 所有的内容都读到此数组之中
			try {
				input.read(b);
				// 第4步、关闭输出流
				input.close(); // 关闭输出流			
				menu=new String(b);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} // 读取内容

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} // 通过对象多态性，进行实例化
	}
	public static String getMenuStr(){
		return menu;
	}
	
	public static Menu[] getMenu(){
		JSONArray jsonArray = JSONArray.fromObject(menu); 
		
        //List<Menu> menuList = JSONArray.toList(jsonArray, new Menu(),new JsonConfig());
		Menu[] menus=(Menu[])jsonArray.toArray();
		
		updateMenuAccess(menus);
        return menus;
	}
	
    private static void UpdateMenuAccess(Menu[] menus)
    {
        int displaySubMenuCount = 0, lvl3MenuCount = 0;


            String[] accessMenu = null;
            foreach (Menu menu in menus)
            {
                menu.Display = accessMenu.Any(m => m.Equals(menu.MenuCode, StringComparison.OrdinalIgnoreCase));
                
                if (menu.subNav != null/* && menu.Display == true*/)
                {
                    // if sub menu will display, then the parent menu will also display.
                    displaySubMenuCount = 0;
                    foreach (var subMenu in menu.subNav)
                    {
                        subMenu.Display = accessMenu.Any(m => m.Equals(subMenu.MenuCode, StringComparison.OrdinalIgnoreCase));
                        if (subMenu.subNav != null)
                        {
                            lvl3MenuCount = 0;
                            foreach (var subsubmenu in subMenu.subNav)
                            {
                                subsubmenu.Display = accessMenu.Any(m => m.Equals(subsubmenu.MenuCode, StringComparison.OrdinalIgnoreCase));
                                if (subsubmenu.Display == true)
                                {
                                    lvl3MenuCount++;
                                }
                            }
                            subMenu.Display = lvl3MenuCount > 0;
                        }
                        if (subMenu.Display == true)
                        {
                            displaySubMenuCount++;
                        }
                    }

                    menu.Display = displaySubMenuCount > 0;

                    if (displaySubMenuCount > 0)
                    {
                        // set the parent menu route to its first visible child menu route
                        var firstDiplayedSubMenu = menu.subNav.FirstOrDefault(m => m.Display == true);
                        if (firstDiplayedSubMenu != null)
                        {
                            // if parent menu route is set for specific sub menu route and it is visible, then skip setting the parent route again.
                            if (!menu.subNav.Any(m=>m.Display == true && m.Route.Equals(menu.Route,StringComparison.OrdinalIgnoreCase)))
                            {
                                menu.Route = firstDiplayedSubMenu.Route;
                            }
                            
                        }
                    }

                }

                if (menu.Route.Equals("home",StringComparison.OrdinalIgnoreCase))
                {
                    menu.Display = true;
                }
            }
        }
    }	
}